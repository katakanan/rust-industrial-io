/* automatically generated by rust-bindgen 0.58.1 */
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(dead_code)]

use windows_dll::dll;

pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const SIZE_MAX: u32 = 4294967295;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
pub type size_t = ::std::os::raw::c_uint;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "fastcall" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure();
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
// #[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        12usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        4usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
// #[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        4usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
// #[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_uint,
        _Size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
// #[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
// #[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
// #[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
// #[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
// #[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
// #[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
// #[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
// #[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
pub type ssize_t = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iio_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iio_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iio_channel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iio_buffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iio_context_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iio_scan_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iio_scan_block {
    _unused: [u8; 0],
}
pub const iio_chan_type_IIO_VOLTAGE: iio_chan_type = 0;
pub const iio_chan_type_IIO_CURRENT: iio_chan_type = 1;
pub const iio_chan_type_IIO_POWER: iio_chan_type = 2;
pub const iio_chan_type_IIO_ACCEL: iio_chan_type = 3;
pub const iio_chan_type_IIO_ANGL_VEL: iio_chan_type = 4;
pub const iio_chan_type_IIO_MAGN: iio_chan_type = 5;
pub const iio_chan_type_IIO_LIGHT: iio_chan_type = 6;
pub const iio_chan_type_IIO_INTENSITY: iio_chan_type = 7;
pub const iio_chan_type_IIO_PROXIMITY: iio_chan_type = 8;
pub const iio_chan_type_IIO_TEMP: iio_chan_type = 9;
pub const iio_chan_type_IIO_INCLI: iio_chan_type = 10;
pub const iio_chan_type_IIO_ROT: iio_chan_type = 11;
pub const iio_chan_type_IIO_ANGL: iio_chan_type = 12;
pub const iio_chan_type_IIO_TIMESTAMP: iio_chan_type = 13;
pub const iio_chan_type_IIO_CAPACITANCE: iio_chan_type = 14;
pub const iio_chan_type_IIO_ALTVOLTAGE: iio_chan_type = 15;
pub const iio_chan_type_IIO_CCT: iio_chan_type = 16;
pub const iio_chan_type_IIO_PRESSURE: iio_chan_type = 17;
pub const iio_chan_type_IIO_HUMIDITYRELATIVE: iio_chan_type = 18;
pub const iio_chan_type_IIO_ACTIVITY: iio_chan_type = 19;
pub const iio_chan_type_IIO_STEPS: iio_chan_type = 20;
pub const iio_chan_type_IIO_ENERGY: iio_chan_type = 21;
pub const iio_chan_type_IIO_DISTANCE: iio_chan_type = 22;
pub const iio_chan_type_IIO_VELOCITY: iio_chan_type = 23;
pub const iio_chan_type_IIO_CONCENTRATION: iio_chan_type = 24;
pub const iio_chan_type_IIO_RESISTANCE: iio_chan_type = 25;
pub const iio_chan_type_IIO_PH: iio_chan_type = 26;
pub const iio_chan_type_IIO_UVINDEX: iio_chan_type = 27;
pub const iio_chan_type_IIO_ELECTRICALCONDUCTIVITY: iio_chan_type = 28;
pub const iio_chan_type_IIO_COUNT: iio_chan_type = 29;
pub const iio_chan_type_IIO_INDEX: iio_chan_type = 30;
pub const iio_chan_type_IIO_GRAVITY: iio_chan_type = 31;
pub const iio_chan_type_IIO_POSITIONRELATIVE: iio_chan_type = 32;
pub const iio_chan_type_IIO_PHASE: iio_chan_type = 33;
pub const iio_chan_type_IIO_MASSCONCENTRATION: iio_chan_type = 34;
pub const iio_chan_type_IIO_CHAN_TYPE_UNKNOWN: iio_chan_type = 2147483647;
#[doc = " @enum iio_chan_type"]
#[doc = " @brief IIO channel type"]
#[doc = ""]
#[doc = " A IIO channel has a type specifying the type of data associated with the"]
#[doc = " channel."]
// pub type iio_chan_type = ::std::os::raw::c_int;
pub type iio_chan_type = ::std::os::raw::c_uint;
pub const iio_modifier_IIO_NO_MOD: iio_modifier = 0;
pub const iio_modifier_IIO_MOD_X: iio_modifier = 1;
pub const iio_modifier_IIO_MOD_Y: iio_modifier = 2;
pub const iio_modifier_IIO_MOD_Z: iio_modifier = 3;
pub const iio_modifier_IIO_MOD_X_AND_Y: iio_modifier = 4;
pub const iio_modifier_IIO_MOD_X_AND_Z: iio_modifier = 5;
pub const iio_modifier_IIO_MOD_Y_AND_Z: iio_modifier = 6;
pub const iio_modifier_IIO_MOD_X_AND_Y_AND_Z: iio_modifier = 7;
pub const iio_modifier_IIO_MOD_X_OR_Y: iio_modifier = 8;
pub const iio_modifier_IIO_MOD_X_OR_Z: iio_modifier = 9;
pub const iio_modifier_IIO_MOD_Y_OR_Z: iio_modifier = 10;
pub const iio_modifier_IIO_MOD_X_OR_Y_OR_Z: iio_modifier = 11;
pub const iio_modifier_IIO_MOD_LIGHT_BOTH: iio_modifier = 12;
pub const iio_modifier_IIO_MOD_LIGHT_IR: iio_modifier = 13;
pub const iio_modifier_IIO_MOD_ROOT_SUM_SQUARED_X_Y: iio_modifier = 14;
pub const iio_modifier_IIO_MOD_SUM_SQUARED_X_Y_Z: iio_modifier = 15;
pub const iio_modifier_IIO_MOD_LIGHT_CLEAR: iio_modifier = 16;
pub const iio_modifier_IIO_MOD_LIGHT_RED: iio_modifier = 17;
pub const iio_modifier_IIO_MOD_LIGHT_GREEN: iio_modifier = 18;
pub const iio_modifier_IIO_MOD_LIGHT_BLUE: iio_modifier = 19;
pub const iio_modifier_IIO_MOD_QUATERNION: iio_modifier = 20;
pub const iio_modifier_IIO_MOD_TEMP_AMBIENT: iio_modifier = 21;
pub const iio_modifier_IIO_MOD_TEMP_OBJECT: iio_modifier = 22;
pub const iio_modifier_IIO_MOD_NORTH_MAGN: iio_modifier = 23;
pub const iio_modifier_IIO_MOD_NORTH_TRUE: iio_modifier = 24;
pub const iio_modifier_IIO_MOD_NORTH_MAGN_TILT_COMP: iio_modifier = 25;
pub const iio_modifier_IIO_MOD_NORTH_TRUE_TILT_COMP: iio_modifier = 26;
pub const iio_modifier_IIO_MOD_RUNNING: iio_modifier = 27;
pub const iio_modifier_IIO_MOD_JOGGING: iio_modifier = 28;
pub const iio_modifier_IIO_MOD_WALKING: iio_modifier = 29;
pub const iio_modifier_IIO_MOD_STILL: iio_modifier = 30;
pub const iio_modifier_IIO_MOD_ROOT_SUM_SQUARED_X_Y_Z: iio_modifier = 31;
pub const iio_modifier_IIO_MOD_I: iio_modifier = 32;
pub const iio_modifier_IIO_MOD_Q: iio_modifier = 33;
pub const iio_modifier_IIO_MOD_CO2: iio_modifier = 34;
pub const iio_modifier_IIO_MOD_VOC: iio_modifier = 35;
pub const iio_modifier_IIO_MOD_LIGHT_UV: iio_modifier = 36;
pub const iio_modifier_IIO_MOD_LIGHT_DUV: iio_modifier = 37;
pub const iio_modifier_IIO_MOD_PM1: iio_modifier = 38;
pub const iio_modifier_IIO_MOD_PM2P5: iio_modifier = 39;
pub const iio_modifier_IIO_MOD_PM4: iio_modifier = 40;
pub const iio_modifier_IIO_MOD_PM10: iio_modifier = 41;
pub const iio_modifier_IIO_MOD_ETHANOL: iio_modifier = 42;
pub const iio_modifier_IIO_MOD_H2: iio_modifier = 43;
pub const iio_modifier_IIO_MOD_O2: iio_modifier = 44;
#[doc = " @enum iio_modifier"]
#[doc = " @brief IIO channel modifier"]
#[doc = ""]
#[doc = " In a addition to a type a IIO channel can optionally have a channel modifier"]
#[doc = " further specifying the data type of of the channel."]
// pub type iio_modifier = ::std::os::raw::c_int;
pub type iio_modifier = ::std::os::raw::c_uint;

#[doc = " @defgroup Debug Debug and low-level functions"]
#[doc = " @{"]
#[doc = " @struct iio_data_format"]
#[doc = " @brief Contains the format of a data sample."]
#[doc = ""]
#[doc = " The different fields inform about the correct way to convert one sample from"]
#[doc = " its raw format (as read from / generated by the hardware) to its real-world"]
#[doc = " value."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iio_data_format {
    #[doc = " @brief Total length of the sample, in bits"]
    pub length: ::std::os::raw::c_uint,
    #[doc = " @brief Length of valuable data in the sample, in bits"]
    pub bits: ::std::os::raw::c_uint,
    #[doc = " @brief Right-shift to apply when converting sample"]
    pub shift: ::std::os::raw::c_uint,
    #[doc = " @brief Contains True if the sample is signed"]
    pub is_signed: bool,
    #[doc = " @brief Contains True if the sample is fully defined, sign extended, etc."]
    pub is_fully_defined: bool,
    #[doc = " @brief Contains True if the sample is in big-endian format"]
    pub is_be: bool,
    #[doc = " @brief Contains True if the sample should be scaled when converted"]
    pub with_scale: bool,
    #[doc = " @brief Contains the scale to apply if with_scale is set"]
    pub scale: f64,
    #[doc = " @brief Number of times length repeats (added in v0.8)"]
    pub repeat: ::std::os::raw::c_uint,
}

#[dll("libiio.dll")]
extern "C" {
    #[doc = " @brief Create a scan context"]
    #[doc = " @param backend A NULL-terminated string containing the backend(s) to use for"]
    #[doc = " scanning (example: pre version 0.20 :  \"local\", \"ip\", or \"usb\"; post version"]
    #[doc = " 0.20 can handle multiple, including \"local:usb:\", \"ip:usb:\", \"local:usb:ip:\")."]
    #[doc = " If NULL, all the available backends are used."]
    #[doc = " @param flags Unused for now. Set to 0."]
    #[doc = " @return on success, a pointer to a iio_scan_context structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    pub fn iio_create_scan_context(
        backend: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> *mut iio_scan_context;
    // }
    // extern "C" {
    #[doc = " @brief Destroy the given scan context"]
    #[doc = " @param ctx A pointer to an iio_scan_context structure"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> After that function, the iio_scan_context pointer shall be invalid."]
    pub fn iio_scan_context_destroy(ctx: *mut iio_scan_context);
    // }
    // extern "C" {
    #[doc = " @brief Enumerate available contexts"]
    #[doc = " @param ctx A pointer to an iio_scan_context structure"]
    #[doc = " @param info A pointer to a 'const struct iio_context_info **' typed variable."]
    #[doc = " The pointed variable will be initialized on success."]
    #[doc = " @returns On success, the number of contexts found."]
    #[doc = " @returns On failure, a negative error number."]
    pub fn iio_scan_context_get_info_list(
        ctx: *mut iio_scan_context,
        info: *mut *mut *mut iio_context_info,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Free a context info list"]
    #[doc = " @param info A pointer to a 'const struct iio_context_info *' typed variable"]
    pub fn iio_context_info_list_free(info: *mut *mut iio_context_info);
    // }
    // extern "C" {
    #[doc = " @brief Get a description of a discovered context"]
    #[doc = " @param info A pointer to an iio_context_info structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    pub fn iio_context_info_get_description(
        info: *const iio_context_info,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Get the URI of a discovered context"]
    #[doc = " @param info A pointer to an iio_context_info structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    pub fn iio_context_info_get_uri(info: *const iio_context_info)
        -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Create a scan block"]
    #[doc = " @param backend A NULL-terminated string containing the backend to use for"]
    #[doc = " scanning. If NULL, all the available backends are used."]
    #[doc = " @param flags Unused for now. Set to 0."]
    #[doc = " @return on success, a pointer to a iio_scan_block structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    #[doc = ""]
    #[doc = " Introduced in version 0.20."]
    pub fn iio_create_scan_block(
        backend: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> *mut iio_scan_block;
    // }
    // extern "C" {
    #[doc = " @brief Destroy the given scan block"]
    #[doc = " @param blk A pointer to an iio_scan_block structure"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> After that function, the iio_scan_block pointer shall be invalid."]
    #[doc = ""]
    #[doc = " Introduced in version 0.20."]
    pub fn iio_scan_block_destroy(blk: *mut iio_scan_block);
    // }
    // extern "C" {
    #[doc = " @brief Enumerate available contexts via scan block"]
    #[doc = " @param blk A pointer to a iio_scan_block structure."]
    #[doc = " @returns On success, the number of contexts found."]
    #[doc = " @returns On failure, a negative error number."]
    #[doc = ""]
    #[doc = " Introduced in version 0.20."]
    pub fn iio_scan_block_scan(blk: *mut iio_scan_block) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Get the iio_context_info for a particular context"]
    #[doc = " @param blk A pointer to an iio_scan_block structure"]
    #[doc = " @param index The index corresponding to the context."]
    #[doc = " @return A pointer to the iio_context_info for the context"]
    #[doc = " @returns On success, a pointer to the specified iio_context_info"]
    #[doc = " @returns On failure, NULL is returned and errno is set appropriately"]
    #[doc = ""]
    #[doc = " Introduced in version 0.20."]
    pub fn iio_scan_block_get_info(
        blk: *mut iio_scan_block,
        index: ::std::os::raw::c_uint,
    ) -> *mut iio_context_info;
    // }
    // extern "C" {
    #[doc = " @brief Get the version of the libiio library"]
    #[doc = " @param major A pointer to an unsigned integer (NULL accepted)"]
    #[doc = " @param minor A pointer to an unsigned integer (NULL accepted)"]
    #[doc = " @param git_tag A pointer to a 8-characters buffer (NULL accepted)"]
    pub fn iio_library_get_version(
        major: *mut ::std::os::raw::c_uint,
        minor: *mut ::std::os::raw::c_uint,
        git_tag: *mut ::std::os::raw::c_char,
    );
    // }
    // extern "C" {
    #[doc = " @brief Get a string description of an error code"]
    #[doc = " @param err The error code"]
    #[doc = " @param dst A pointer to the memory area where the NULL-terminated string"]
    #[doc = " corresponding to the error message will be stored"]
    #[doc = " @param len The available length of the memory area, in bytes"]
    pub fn iio_strerror(err: ::std::os::raw::c_int, dst: *mut ::std::os::raw::c_char, len: size_t);
    // }
    // extern "C" {
    #[doc = " @brief Check if the specified backend is available"]
    #[doc = " @param backend The name of the backend to query"]
    #[doc = " @return True if the backend is available, false otherwise"]
    #[doc = ""]
    #[doc = " Introduced in version 0.9."]
    pub fn iio_has_backend(backend: *const ::std::os::raw::c_char) -> bool;
    // }
    // extern "C" {
    #[doc = " @brief Get the number of available backends"]
    #[doc = " @return The number of available backends"]
    #[doc = ""]
    #[doc = " Introduced in version 0.9."]
    pub fn iio_get_backends_count() -> ::std::os::raw::c_uint;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the name of a given backend"]
    #[doc = " @param index The index corresponding to the attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the index is invalid, NULL is returned"]
    #[doc = ""]
    #[doc = " Introduced in version 0.9."]
    pub fn iio_get_backend(index: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Create a context from local or remote IIO devices"]
    #[doc = " @return On success, A pointer to an iio_context structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function will create a network context if the IIOD_REMOTE"]
    #[doc = " environment variable is set to the hostname where the IIOD server runs. If"]
    #[doc = " set to an empty string, the server will be discovered using ZeroConf."]
    #[doc = " If the environment variable is not set, a local context will be created"]
    #[doc = " instead."]
    pub fn iio_create_default_context() -> *mut iio_context;
    // }
    // extern "C" {
    #[doc = " @brief Create a context from local IIO devices (Linux only)"]
    #[doc = " @return On success, A pointer to an iio_context structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    pub fn iio_create_local_context() -> *mut iio_context;
    // }
    // extern "C" {
    #[doc = " @brief Create a context from a XML file"]
    #[doc = " @param xml_file Path to the XML file to open"]
    #[doc = " @return On success, A pointer to an iio_context structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> The format of the XML must comply to the one returned by"]
    #[doc = " iio_context_get_xml."]
    pub fn iio_create_xml_context(xml_file: *const ::std::os::raw::c_char) -> *mut iio_context;
    // }
    // extern "C" {
    #[doc = " @brief Create a context from XML data in memory"]
    #[doc = " @param xml Pointer to the XML data in memory"]
    #[doc = " @param len Length of the XML string in memory (excluding the final \\0)"]
    #[doc = " @return On success, A pointer to an iio_context structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> The format of the XML must comply to the one returned by"]
    #[doc = " iio_context_get_xml"]
    pub fn iio_create_xml_context_mem(
        xml: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> *mut iio_context;
    // }
    // extern "C" {
    #[doc = " @brief Create a context from the network"]
    #[doc = " @param host Hostname, IPv4 or IPv6 address where the IIO Daemon is running"]
    #[doc = " @return On success, a pointer to an iio_context structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    pub fn iio_create_network_context(host: *const ::std::os::raw::c_char) -> *mut iio_context;
    // }
    // extern "C" {
    #[doc = " @brief Create a context from a URI description"]
    #[doc = " @param uri A URI describing the context location"]
    #[doc = " @return On success, a pointer to a iio_context structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> The following URIs are supported based on compile time backend"]
    #[doc = " support:"]
    #[doc = " - Local backend, \"local:\"\\n"]
    #[doc = "   Does not have an address part. For example <i>\"local:\"</i>"]
    #[doc = " - XML backend, \"xml:\"\\n Requires a path to the XML file for the address part."]
    #[doc = "   For example <i>\"xml:/home/user/file.xml\"</i>"]
    #[doc = " - Network backend, \"ip:\"\\n Requires a hostname, IPv4, or IPv6 to connect to"]
    #[doc = "   a specific running IIO Daemon or no address part for automatic discovery"]
    #[doc = "   when library is compiled with ZeroConf support. For example"]
    #[doc = "   <i>\"ip:192.168.2.1\"</i>, <b>or</b> <i>\"ip:localhost\"</i>, <b>or</b> <i>\"ip:\"</i>"]
    #[doc = "   <b>or</b> <i>\"ip:plutosdr.local\"</i>"]
    #[doc = " - USB backend, \"usb:\"\\n When more than one usb device is attached, requires"]
    #[doc = "   bus, address, and interface parts separated with a dot. For example"]
    #[doc = "   <i>\"usb:3.32.5\"</i>. Where there is only one USB device attached, the shorthand"]
    #[doc = "   <i>\"usb:\"</i> can be used."]
    #[doc = " - Serial backend, \"serial:\"\\n Requires:"]
    #[doc = "     - a port (/dev/ttyUSB0),"]
    #[doc = "     - baud_rate (default <b>115200</b>)"]
    #[doc = "     - serial port configuration"]
    #[doc = "        - data bits (5 6 7 <b>8</b> 9)"]
    #[doc = "        - parity ('<b>n</b>' none, 'o' odd, 'e' even, 'm' mark, 's' space)"]
    #[doc = "        - stop bits (<b>1</b> 2)"]
    #[doc = "        - flow control ('<b>\\0</b>' none, 'x' Xon Xoff, 'r' RTSCTS, 'd' DTRDSR)"]
    #[doc = ""]
    #[doc = "  For example <i>\"serial:/dev/ttyUSB0,115200\"</i> <b>or</b> <i>\"serial:/dev/ttyUSB0,115200,8n1\"</i>"]
    pub fn iio_create_context_from_uri(uri: *const ::std::os::raw::c_char) -> *mut iio_context;
    // }
    // extern "C" {
    #[doc = " @brief Duplicate a pre-existing IIO context"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @return On success, A pointer to an iio_context structure"]
    #[doc = " @return On failure, NULL is returned and errno is set appropriately"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is not supported on 'usb:' contexts, since libusb"]
    #[doc = " can only claim the interface once. \"Function not implemented\" is the expected errno."]
    #[doc = " Any context which is cloned, must be destroyed via calling iio_context_destroy()"]
    pub fn iio_context_clone(ctx: *const iio_context) -> *mut iio_context;
    // }
    // extern "C" {
    #[doc = " @brief Destroy the given context"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> After that function, the iio_context pointer shall be invalid."]
    pub fn iio_context_destroy(ctx: *mut iio_context);
    // }
    // extern "C" {
    #[doc = " @brief Get the version of the backend in use"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @param major A pointer to an unsigned integer (NULL accepted)"]
    #[doc = " @param minor A pointer to an unsigned integer (NULL accepted)"]
    #[doc = " @param git_tag A pointer to a 8-characters buffer (NULL accepted)"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_context_get_version(
        ctx: *const iio_context,
        major: *mut ::std::os::raw::c_uint,
        minor: *mut ::std::os::raw::c_uint,
        git_tag: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Obtain a XML representation of the given context"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    pub fn iio_context_get_xml(ctx: *const iio_context) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Get the name of the given context"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>The returned string will be <b><i>local</i></b>,"]
    #[doc = " <b><i>xml</i></b> or <b><i>network</i></b> when the context has been"]
    #[doc = " created with the local, xml and network backends respectively."]
    pub fn iio_context_get_name(ctx: *const iio_context) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Get a description of the given context"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>The returned string will contain human-readable information about"]
    #[doc = " the current context."]
    pub fn iio_context_get_description(ctx: *const iio_context) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Get the number of context-specific attributes"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @return The number of context-specific attributes"]
    #[doc = ""]
    #[doc = " Introduced in version 0.9."]
    pub fn iio_context_get_attrs_count(ctx: *const iio_context) -> ::std::os::raw::c_uint;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the name and value of a context-specific attribute"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @param index The index corresponding to the attribute"]
    #[doc = " @param name A pointer to a const char * pointer (NULL accepted)"]
    #[doc = " @param value A pointer to a const char * pointer (NULL accepted)"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " Introduced in version 0.9."]
    pub fn iio_context_get_attr(
        ctx: *const iio_context,
        index: ::std::os::raw::c_uint,
        name: *mut *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the value of a context-specific attribute"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @param name The name of the context attribute to read"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the name does not correspond to any attribute, NULL is"]
    #[doc = " returned"]
    #[doc = ""]
    #[doc = " Introduced in version 0.9."]
    pub fn iio_context_get_attr_value(
        ctx: *const iio_context,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Enumerate the devices found in the given context"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @return The number of devices found"]
    pub fn iio_context_get_devices_count(ctx: *const iio_context) -> ::std::os::raw::c_uint;
    // }
    // extern "C" {
    #[doc = " @brief Get the device present at the given index"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @param index The index corresponding to the device"]
    #[doc = " @return On success, a pointer to an iio_device structure"]
    #[doc = " @return If the index is invalid, NULL is returned"]
    pub fn iio_context_get_device(
        ctx: *const iio_context,
        index: ::std::os::raw::c_uint,
    ) -> *mut iio_device;
    // }
    // extern "C" {
    #[doc = " @brief Try to find a device structure by its ID, label or name"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @param name A NULL-terminated string corresponding to the ID, label or name"]
    #[doc = " of the device to search for"]
    #[doc = " @return On success, a pointer to an iio_device structure"]
    #[doc = " @return If the parameter does not correspond to the ID, label or name of"]
    #[doc = " any known device, NULL is returned"]
    pub fn iio_context_find_device(
        ctx: *const iio_context,
        name: *const ::std::os::raw::c_char,
    ) -> *mut iio_device;
    // }
    // extern "C" {
    #[doc = " @brief Set a timeout for I/O operations"]
    #[doc = " @param ctx A pointer to an iio_context structure"]
    #[doc = " @param timeout_ms A positive integer representing the time in milliseconds"]
    #[doc = " after which a timeout occurs. A value of 0 is used to specify that no"]
    #[doc = " timeout should occur."]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_context_set_timeout(
        ctx: *mut iio_context,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve a pointer to the iio_context structure"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return A pointer to an iio_context structure"]
    pub fn iio_device_get_context(dev: *const iio_device) -> *const iio_context;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the device ID (e.g. <b><i>iio:device0</i></b>)"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    pub fn iio_device_get_id(dev: *const iio_device) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the device name (e.g. <b><i>xadc</i></b>)"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> if the device has no name, NULL is returned."]
    pub fn iio_device_get_name(dev: *const iio_device) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the device label (e.g. <b><i>lo_pll0_rx_adf4351</i></b>)"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> if the device has no label, NULL is returned."]
    pub fn iio_device_get_label(dev: *const iio_device) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Enumerate the channels of the given device"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return The number of channels found"]
    pub fn iio_device_get_channels_count(dev: *const iio_device) -> ::std::os::raw::c_uint;
    // }
    // extern "C" {
    #[doc = " @brief Enumerate the device-specific attributes of the given device"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return The number of device-specific attributes found"]
    pub fn iio_device_get_attrs_count(dev: *const iio_device) -> ::std::os::raw::c_uint;
    // }
    // extern "C" {
    #[doc = " @brief Enumerate the buffer-specific attributes of the given device"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return The number of buffer-specific attributes found"]
    pub fn iio_device_get_buffer_attrs_count(dev: *const iio_device) -> ::std::os::raw::c_uint;
    // }
    // extern "C" {
    #[doc = " @brief Get the channel present at the given index"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param index The index corresponding to the channel"]
    #[doc = " @return On success, a pointer to an iio_channel structure"]
    #[doc = " @return If the index is invalid, NULL is returned"]
    pub fn iio_device_get_channel(
        dev: *const iio_device,
        index: ::std::os::raw::c_uint,
    ) -> *mut iio_channel;
    // }
    // extern "C" {
    #[doc = " @brief Get the device-specific attribute present at the given index"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param index The index corresponding to the attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the index is invalid, NULL is returned"]
    pub fn iio_device_get_attr(
        dev: *const iio_device,
        index: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Get the buffer-specific attribute present at the given index"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param index The index corresponding to the attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the index is invalid, NULL is returned"]
    pub fn iio_device_get_buffer_attr(
        dev: *const iio_device,
        index: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Try to find a channel structure by its name of ID"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param name A NULL-terminated string corresponding to the name or the ID of"]
    #[doc = " the channel to search for"]
    #[doc = " @param output True if the searched channel is output, False otherwise"]
    #[doc = " @return On success, a pointer to an iio_channel structure"]
    #[doc = " @return If the name or ID does not correspond to any known channel of the"]
    #[doc = " given device, NULL is returned"]
    pub fn iio_device_find_channel(
        dev: *const iio_device,
        name: *const ::std::os::raw::c_char,
        output: bool,
    ) -> *mut iio_channel;
    // }
    // extern "C" {
    #[doc = " @brief Try to find a device-specific attribute by its name"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param name A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the name does not correspond to any known attribute of the given"]
    #[doc = " device, NULL is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is useful to detect the presence of an attribute."]
    #[doc = " It can also be used to retrieve the name of an attribute as a pointer to a"]
    #[doc = " static string from a dynamically allocated string."]
    pub fn iio_device_find_attr(
        dev: *const iio_device,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Try to find a buffer-specific attribute by its name"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param name A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the name does not correspond to any known attribute of the given"]
    #[doc = " device, NULL is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is useful to detect the presence of an attribute."]
    #[doc = " It can also be used to retrieve the name of an attribute as a pointer to a"]
    #[doc = " static string from a dynamically allocated string."]
    pub fn iio_device_find_buffer_attr(
        dev: *const iio_device,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param dst A pointer to the memory area where the NULL-terminated string"]
    #[doc = " corresponding to the value read will be stored"]
    #[doc = " @param len The available length of the memory area, in bytes"]
    #[doc = " @return On success, the number of bytes written to the buffer"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>By passing NULL as the \"attr\" argument to iio_device_attr_read,"]
    #[doc = " it is now possible to read all of the attributes of a device."]
    #[doc = ""]
    #[doc = " The buffer is filled with one block of data per attribute of the device,"]
    #[doc = " by the order they appear in the iio_device structure."]
    #[doc = ""]
    #[doc = " The first four bytes of one block correspond to a 32-bit signed value in"]
    #[doc = " network order. If negative, it corresponds to the errno code that were"]
    #[doc = " returned when reading the attribute; if positive, it corresponds to the"]
    #[doc = " length of the data read. In that case, the rest of the block contains"]
    #[doc = " the data."]
    pub fn iio_device_attr_read(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of all device-specific attributes"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param cb A pointer to a callback function"]
    #[doc = " @param data A pointer that will be passed to the callback function"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is especially useful when used with the network"]
    #[doc = " backend, as all the device-specific attributes are read in one single"]
    #[doc = " command."]
    pub fn iio_device_attr_read_all(
        dev: *mut iio_device,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut iio_device,
                attr: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                len: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a bool variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_attr_read_bool(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a long long variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_attr_read_longlong(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a double variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_attr_read_double(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param src A NULL-terminated string to set the attribute to"]
    #[doc = " @return On success, the number of bytes written"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>By passing NULL as the \"attr\" argument to iio_device_attr_write,"]
    #[doc = " it is now possible to write all of the attributes of a device."]
    #[doc = ""]
    #[doc = " The buffer must contain one block of data per attribute of the device,"]
    #[doc = " by the order they appear in the iio_device structure."]
    #[doc = ""]
    #[doc = " The first four bytes of one block correspond to a 32-bit signed value in"]
    #[doc = " network order. If negative, the attribute is not written; if positive,"]
    #[doc = " it corresponds to the length of the data to write. In that case, the rest"]
    #[doc = " of the block must contain the data."]
    pub fn iio_device_attr_write(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param src A pointer to the data to be written"]
    #[doc = " @param len The number of bytes that should be written"]
    #[doc = " @return On success, the number of bytes written"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_attr_write_raw(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Set the values of all device-specific attributes"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param cb A pointer to a callback function"]
    #[doc = " @param data A pointer that will be passed to the callback function"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is especially useful when used with the network"]
    #[doc = " backend, as all the device-specific attributes are written in one single"]
    #[doc = " command."]
    pub fn iio_device_attr_write_all(
        dev: *mut iio_device,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut iio_device,
                attr: *const ::std::os::raw::c_char,
                buf: *mut ::std::os::raw::c_void,
                len: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ssize_t,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A bool value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_attr_write_bool(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A long long value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_attr_write_longlong(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given device-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A double value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_attr_write_double(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: f64,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param dst A pointer to the memory area where the NULL-terminated string"]
    #[doc = " corresponding to the value read will be stored"]
    #[doc = " @param len The available length of the memory area, in bytes"]
    #[doc = " @return On success, the number of bytes written to the buffer"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>By passing NULL as the \"attr\" argument to"]
    #[doc = " iio_device_buffer_attr_read, it is now possible to read all of the attributes"]
    #[doc = " of a device."]
    #[doc = ""]
    #[doc = " The buffer is filled with one block of data per attribute of the buffer,"]
    #[doc = " by the order they appear in the iio_device structure."]
    #[doc = ""]
    #[doc = " The first four bytes of one block correspond to a 32-bit signed value in"]
    #[doc = " network order. If negative, it corresponds to the errno code that were"]
    #[doc = " returned when reading the attribute; if positive, it corresponds to the"]
    #[doc = " length of the data read. In that case, the rest of the block contains"]
    #[doc = " the data."]
    pub fn iio_device_buffer_attr_read(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of all buffer-specific attributes"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param cb A pointer to a callback function"]
    #[doc = " @param data A pointer that will be passed to the callback function"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is especially useful when used with the network"]
    #[doc = " backend, as all the buffer-specific attributes are read in one single"]
    #[doc = " command."]
    pub fn iio_device_buffer_attr_read_all(
        dev: *mut iio_device,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut iio_device,
                attr: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                len: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a bool variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_buffer_attr_read_bool(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a long long variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_buffer_attr_read_longlong(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a double variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_buffer_attr_read_double(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param src A NULL-terminated string to set the attribute to"]
    #[doc = " @return On success, the number of bytes written"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>By passing NULL as the \"attr\" argument to"]
    #[doc = " iio_device_buffer_attr_write, it is now possible to write all of the"]
    #[doc = " attributes of a device."]
    #[doc = ""]
    #[doc = " The buffer must contain one block of data per attribute of the buffer,"]
    #[doc = " by the order they appear in the iio_device structure."]
    #[doc = ""]
    #[doc = " The first four bytes of one block correspond to a 32-bit signed value in"]
    #[doc = " network order. If negative, the attribute is not written; if positive,"]
    #[doc = " it corresponds to the length of the data to write. In that case, the rest"]
    #[doc = " of the block must contain the data."]
    pub fn iio_device_buffer_attr_write(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param src A pointer to the data to be written"]
    #[doc = " @param len The number of bytes that should be written"]
    #[doc = " @return On success, the number of bytes written"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_buffer_attr_write_raw(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Set the values of all buffer-specific attributes"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param cb A pointer to a callback function"]
    #[doc = " @param data A pointer that will be passed to the callback function"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is especially useful when used with the network"]
    #[doc = " backend, as all the buffer-specific attributes are written in one single"]
    #[doc = " command."]
    pub fn iio_device_buffer_attr_write_all(
        dev: *mut iio_device,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut iio_device,
                attr: *const ::std::os::raw::c_char,
                buf: *mut ::std::os::raw::c_void,
                len: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ssize_t,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A bool value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_buffer_attr_write_bool(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A long long value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_buffer_attr_write_longlong(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given buffer-specific attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A double value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_buffer_attr_write_double(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: f64,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Associate a pointer to an iio_device structure"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param data The pointer to be associated"]
    pub fn iio_device_set_data(dev: *mut iio_device, data: *mut ::std::os::raw::c_void);
    // }
    // extern "C" {
    #[doc = " @brief Retrieve a previously associated pointer of an iio_device structure"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return The pointer previously associated if present, or NULL"]
    pub fn iio_device_get_data(dev: *const iio_device) -> *mut ::std::os::raw::c_void;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the trigger of a given device"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param trigger a pointer to a pointer of an iio_device structure. The pointed"]
    #[doc = " pointer will be set to the address of the iio_device structure corresponding"]
    #[doc = " to the associated trigger device."]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_get_trigger(
        dev: *const iio_device,
        trigger: *mut *const iio_device,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Associate a trigger to a given device"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param trigger a pointer to the iio_device structure corresponding to the"]
    #[doc = " trigger that should be associated."]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_set_trigger(
        dev: *const iio_device,
        trigger: *const iio_device,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Return True if the given device is a trigger"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return True if the device is a trigger, False otherwise"]
    pub fn iio_device_is_trigger(dev: *const iio_device) -> bool;
    // }
    // extern "C" {
    #[doc = " @brief Configure the number of kernel buffers for a device"]
    #[doc = ""]
    #[doc = " This function allows to change the number of buffers on kernel side."]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param nb_buffers The number of buffers"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_set_kernel_buffers_count(
        dev: *const iio_device,
        nb_buffers: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve a pointer to the iio_device structure"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return A pointer to an iio_device structure"]
    pub fn iio_channel_get_device(chn: *const iio_channel) -> *const iio_device;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the channel ID (e.g. <b><i>voltage0</i></b>)"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    pub fn iio_channel_get_id(chn: *const iio_channel) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the channel name (e.g. <b><i>vccint</i></b>)"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return A pointer to a static NULL-terminated string"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> if the channel has no name, NULL is returned."]
    pub fn iio_channel_get_name(chn: *const iio_channel) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Return True if the given channel is an output channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return True if the channel is an output channel, False otherwise"]
    pub fn iio_channel_is_output(chn: *const iio_channel) -> bool;
    // }
    // extern "C" {
    #[doc = " @brief Return True if the given channel is a scan element"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return True if the channel is a scan element, False otherwise"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> a channel that is a scan element is a channel that can"]
    #[doc = " generate samples (for an input channel) or receive samples (for an output"]
    #[doc = " channel) after being enabled."]
    pub fn iio_channel_is_scan_element(chn: *const iio_channel) -> bool;
    // }
    // extern "C" {
    #[doc = " @brief Enumerate the channel-specific attributes of the given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return The number of channel-specific attributes found"]
    pub fn iio_channel_get_attrs_count(chn: *const iio_channel) -> ::std::os::raw::c_uint;
    // }
    // extern "C" {
    #[doc = " @brief Get the channel-specific attribute present at the given index"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param index The index corresponding to the attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the index is invalid, NULL is returned"]
    pub fn iio_channel_get_attr(
        chn: *const iio_channel,
        index: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Try to find a channel-specific attribute by its name"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param name A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the name does not correspond to any known attribute of the given"]
    #[doc = " channel, NULL is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is useful to detect the presence of an attribute."]
    #[doc = " It can also be used to retrieve the name of an attribute as a pointer to a"]
    #[doc = " static string from a dynamically allocated string."]
    pub fn iio_channel_find_attr(
        chn: *const iio_channel,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve the filename of an attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr a NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the attribute name is unknown, NULL is returned"]
    pub fn iio_channel_attr_get_filename(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param dst A pointer to the memory area where the NULL-terminated string"]
    #[doc = " corresponding to the value read will be stored"]
    #[doc = " @param len The available length of the memory area, in bytes"]
    #[doc = " @return On success, the number of bytes written to the buffer"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>By passing NULL as the \"attr\" argument to iio_channel_attr_read,"]
    #[doc = " it is now possible to read all of the attributes of a channel."]
    #[doc = ""]
    #[doc = " The buffer is filled with one block of data per attribute of the channel,"]
    #[doc = " by the order they appear in the iio_channel structure."]
    #[doc = ""]
    #[doc = " The first four bytes of one block correspond to a 32-bit signed value in"]
    #[doc = " network order. If negative, it corresponds to the errno code that were"]
    #[doc = " returned when reading the attribute; if positive, it corresponds to the"]
    #[doc = " length of the data read. In that case, the rest of the block contains"]
    #[doc = " the data."]
    pub fn iio_channel_attr_read(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of all channel-specific attributes"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param cb A pointer to a callback function"]
    #[doc = " @param data A pointer that will be passed to the callback function"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is especially useful when used with the network"]
    #[doc = " backend, as all the channel-specific attributes are read in one single"]
    #[doc = " command."]
    pub fn iio_channel_attr_read_all(
        chn: *mut iio_channel,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                chn: *mut iio_channel,
                attr: *const ::std::os::raw::c_char,
                val: *const ::std::os::raw::c_char,
                len: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a bool variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_channel_attr_read_bool(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        val: *mut bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a long long variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_channel_attr_read_longlong(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A pointer to a double variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_channel_attr_read_double(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param src A NULL-terminated string to set the attribute to"]
    #[doc = " @return On success, the number of bytes written"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>By passing NULL as the \"attr\" argument to iio_channel_attr_write,"]
    #[doc = " it is now possible to write all of the attributes of a channel."]
    #[doc = ""]
    #[doc = " The buffer must contain one block of data per attribute of the channel,"]
    #[doc = " by the order they appear in the iio_channel structure."]
    #[doc = ""]
    #[doc = " The first four bytes of one block correspond to a 32-bit signed value in"]
    #[doc = " network order. If negative, the attribute is not written; if positive,"]
    #[doc = " it corresponds to the length of the data to write. In that case, the rest"]
    #[doc = " of the block must contain the data."]
    pub fn iio_channel_attr_write(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param src A pointer to the data to be written"]
    #[doc = " @param len The number of bytes that should be written"]
    #[doc = " @return On success, the number of bytes written"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_channel_attr_write_raw(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Set the values of all channel-specific attributes"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param cb A pointer to a callback function"]
    #[doc = " @param data A pointer that will be passed to the callback function"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is especially useful when used with the network"]
    #[doc = " backend, as all the channel-specific attributes are written in one single"]
    #[doc = " command."]
    pub fn iio_channel_attr_write_all(
        chn: *mut iio_channel,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                chn: *mut iio_channel,
                attr: *const ::std::os::raw::c_char,
                buf: *mut ::std::os::raw::c_void,
                len: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ssize_t,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A bool value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_channel_attr_write_bool(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        val: bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A long long value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_channel_attr_write_longlong(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given channel-specific attribute"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " attribute"]
    #[doc = " @param val A double value to set the attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_channel_attr_write_double(
        chn: *const iio_channel,
        attr: *const ::std::os::raw::c_char,
        val: f64,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Enable the given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>Before creating an iio_buffer structure with"]
    #[doc = " iio_device_create_buffer, it is required to enable at least one channel of"]
    #[doc = " the device to read from."]
    pub fn iio_channel_enable(chn: *mut iio_channel);
    // }
    // extern "C" {
    #[doc = " @brief Disable the given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    pub fn iio_channel_disable(chn: *mut iio_channel);
    // }
    // extern "C" {
    #[doc = " @brief Returns True if the channel is enabled"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return True if the channel is enabled, False otherwise"]
    pub fn iio_channel_is_enabled(chn: *const iio_channel) -> bool;
    // }
    // extern "C" {
    #[doc = " @brief Demultiplex the samples of a given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param buffer A pointer to an iio_buffer structure"]
    #[doc = " @param dst A pointer to the memory area where the demultiplexed data will be"]
    #[doc = " stored"]
    #[doc = " @param len The available length of the memory area, in bytes"]
    #[doc = " @return The size of the demultiplexed data, in bytes"]
    pub fn iio_channel_read_raw(
        chn: *const iio_channel,
        buffer: *mut iio_buffer,
        dst: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> size_t;
    // }
    // extern "C" {
    #[doc = " @brief Demultiplex and convert the samples of a given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param buffer A pointer to an iio_buffer structure"]
    #[doc = " @param dst A pointer to the memory area where the converted data will be"]
    #[doc = " stored"]
    #[doc = " @param len The available length of the memory area, in bytes"]
    #[doc = " @return The size of the converted data, in bytes"]
    pub fn iio_channel_read(
        chn: *const iio_channel,
        buffer: *mut iio_buffer,
        dst: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> size_t;
    // }
    // extern "C" {
    #[doc = " @brief Multiplex the samples of a given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param buffer A pointer to an iio_buffer structure"]
    #[doc = " @param src A pointer to the memory area where the sequential data will"]
    #[doc = " be read from"]
    #[doc = " @param len The length of the memory area, in bytes"]
    #[doc = " @return The number of bytes actually multiplexed"]
    pub fn iio_channel_write_raw(
        chn: *const iio_channel,
        buffer: *mut iio_buffer,
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> size_t;
    // }
    // extern "C" {
    #[doc = " @brief Convert and multiplex the samples of a given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param buffer A pointer to an iio_buffer structure"]
    #[doc = " @param src A pointer to the memory area where the sequential data will"]
    #[doc = " be read from"]
    #[doc = " @param len The length of the memory area, in bytes"]
    #[doc = " @return The number of bytes actually converted and multiplexed"]
    pub fn iio_channel_write(
        chn: *const iio_channel,
        buffer: *mut iio_buffer,
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> size_t;
    // }
    // extern "C" {
    #[doc = " @brief Associate a pointer to an iio_channel structure"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param data The pointer to be associated"]
    pub fn iio_channel_set_data(chn: *mut iio_channel, data: *mut ::std::os::raw::c_void);
    // }
    // extern "C" {
    #[doc = " @brief Retrieve a previously associated pointer of an iio_channel structure"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return The pointer previously associated if present, or NULL"]
    pub fn iio_channel_get_data(chn: *const iio_channel) -> *mut ::std::os::raw::c_void;
    // }
    // extern "C" {
    #[doc = " @brief Get the type of the given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return The type of the channel"]
    pub fn iio_channel_get_type(chn: *const iio_channel) -> iio_chan_type;
    // }
    // extern "C" {
    #[doc = " @brief Get the modifier type of the given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return The modifier type of the channel"]
    pub fn iio_channel_get_modifier(chn: *const iio_channel) -> iio_modifier;
    // }
    // extern "C" {
    #[doc = " @brief Retrieve a pointer to the iio_device structure"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @return A pointer to an iio_device structure"]
    pub fn iio_buffer_get_device(buf: *const iio_buffer) -> *const iio_device;
    // }
    // extern "C" {
    #[doc = " @brief Create an input or output buffer associated to the given device"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param samples_count The number of samples that the buffer should contain"]
    #[doc = " @param cyclic If True, enable cyclic mode"]
    #[doc = " @return On success, a pointer to an iio_buffer structure"]
    #[doc = " @return On error, NULL is returned, and errno is set to the error code"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> Channels that have to be written to / read from must be enabled"]
    #[doc = " before creating the buffer."]
    pub fn iio_device_create_buffer(
        dev: *const iio_device,
        samples_count: size_t,
        cyclic: bool,
    ) -> *mut iio_buffer;
    // }
    // extern "C" {
    #[doc = " @brief Destroy the given buffer"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> After that function, the iio_buffer pointer shall be invalid."]
    pub fn iio_buffer_destroy(buf: *mut iio_buffer);
    // }
    // extern "C" {
    #[doc = " @brief Get a pollable file descriptor"]
    #[doc = ""]
    #[doc = " Can be used to know when iio_buffer_refill() or iio_buffer_push() can be"]
    #[doc = " called"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @return On success, valid file descriptor"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_buffer_get_poll_fd(buf: *mut iio_buffer) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Make iio_buffer_refill() and iio_buffer_push() blocking or not"]
    #[doc = ""]
    #[doc = " After this function has been called with blocking == false,"]
    #[doc = " iio_buffer_refill() and iio_buffer_push() will return -EAGAIN if no data is"]
    #[doc = " ready."]
    #[doc = " A device is blocking by default."]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @param blocking true if the buffer API should be blocking, else false"]
    #[doc = " @return On success, 0"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_buffer_set_blocking_mode(
        buf: *mut iio_buffer,
        blocking: bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Fetch more samples from the hardware"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @return On success, the number of bytes read is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> Only valid for input buffers"]
    pub fn iio_buffer_refill(buf: *mut iio_buffer) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Send the samples to the hardware"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @return On success, the number of bytes written is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> Only valid for output buffers"]
    pub fn iio_buffer_push(buf: *mut iio_buffer) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Send a given number of samples to the hardware"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @param samples_count The number of samples to submit"]
    #[doc = " @return On success, the number of bytes written is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> Only valid for output buffers"]
    pub fn iio_buffer_push_partial(buf: *mut iio_buffer, samples_count: size_t) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Cancel all buffer operations"]
    #[doc = " @param buf The buffer for which operations should be canceled"]
    #[doc = ""]
    #[doc = " This function cancels all outstanding buffer operations previously scheduled."]
    #[doc = " This means any pending iio_buffer_push() or iio_buffer_refill() operation"]
    #[doc = " will abort and return immediately, any further invocations of these functions"]
    #[doc = " on the same buffer will return immediately with an error."]
    #[doc = ""]
    #[doc = " Usually iio_buffer_push() and iio_buffer_refill() will block until either all"]
    #[doc = " data has been transferred or a timeout occurs. This can depending on the"]
    #[doc = " configuration take a significant amount of time. iio_buffer_cancel() is"]
    #[doc = " useful to bypass these conditions if the buffer operation is supposed to be"]
    #[doc = " stopped in response to an external event (e.g. user input)."]
    #[doc = ""]
    #[doc = " To be able to capture additional data after calling this function the buffer"]
    #[doc = " should be destroyed and then re-created."]
    #[doc = ""]
    #[doc = " This function can be called multiple times for the same buffer, but all but"]
    #[doc = " the first invocation will be without additional effect."]
    #[doc = ""]
    #[doc = " This function is thread-safe, but not signal-safe, i.e. it must not be called"]
    #[doc = " from a signal handler."]
    pub fn iio_buffer_cancel(buf: *mut iio_buffer);
    // }
    // extern "C" {
    #[doc = " @brief Get the start address of the buffer"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @return A pointer corresponding to the start address of the buffer"]
    pub fn iio_buffer_start(buf: *const iio_buffer) -> *mut ::std::os::raw::c_void;
    // }
    // extern "C" {
    #[doc = " @brief Find the first sample of a channel in a buffer"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return A pointer to the first sample found, or to the end of the buffer if"]
    #[doc = " no sample for the given channel is present in the buffer"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function, coupled with iio_buffer_step and iio_buffer_end,"]
    #[doc = " can be used to iterate on all the samples of a given channel present in the"]
    #[doc = " buffer, doing the following:"]
    #[doc = ""]
    #[doc = " @verbatim"]
    #[doc = "for (void *ptr = iio_buffer_first(buffer, chn); ptr < iio_buffer_end(buffer); ptr += iio_buffer_step(buffer)) {"]
    #[doc = "...."]
    #[doc = "}"]
    #[doc = "@endverbatim"]
    pub fn iio_buffer_first(
        buf: *const iio_buffer,
        chn: *const iio_channel,
    ) -> *mut ::std::os::raw::c_void;
    // }
    // extern "C" {
    #[doc = " @brief Get the step size between two samples of one channel"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @return the difference between the addresses of two consecutive samples of"]
    #[doc = " one same channel"]
    pub fn iio_buffer_step(buf: *const iio_buffer) -> isize;
    // }
    // extern "C" {
    #[doc = " @brief Get the address that follows the last sample in a buffer"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @return A pointer corresponding to the address that follows the last sample"]
    #[doc = " present in the buffer"]
    pub fn iio_buffer_end(buf: *const iio_buffer) -> *mut ::std::os::raw::c_void;
    // }
    // extern "C" {
    #[doc = " @brief Call the supplied callback for each sample found in a buffer"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @param callback A pointer to a function to call for each sample found"]
    #[doc = " @param data A user-specified pointer that will be passed to the callback"]
    #[doc = " @return number of bytes processed."]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> The callback receives four arguments:"]
    #[doc = " * A pointer to the iio_channel structure corresponding to the sample,"]
    #[doc = " * A pointer to the sample itself,"]
    #[doc = " * The length of the sample in bytes,"]
    #[doc = " * The user-specified pointer passed to iio_buffer_foreach_sample."]
    pub fn iio_buffer_foreach_sample(
        buf: *mut iio_buffer,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                chn: *const iio_channel,
                src: *mut ::std::os::raw::c_void,
                bytes: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ssize_t,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Associate a pointer to an iio_buffer structure"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @param data The pointer to be associated"]
    pub fn iio_buffer_set_data(buf: *mut iio_buffer, data: *mut ::std::os::raw::c_void);
    // }
    // extern "C" {
    #[doc = " @brief Retrieve a previously associated pointer of an iio_buffer structure"]
    #[doc = " @param buf A pointer to an iio_buffer structure"]
    #[doc = " @return The pointer previously associated if present, or NULL"]
    pub fn iio_buffer_get_data(buf: *const iio_buffer) -> *mut ::std::os::raw::c_void;
    // }
    // extern "C" {
    #[doc = " @brief Get the current sample size"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return On success, the sample size in bytes"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> The sample size is not constant and will change when channels"]
    #[doc = " get enabled or disabled."]
    pub fn iio_device_get_sample_size(dev: *const iio_device) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Get the index of the given channel"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return On success, the index of the specified channel"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_channel_get_index(chn: *const iio_channel) -> ::std::os::raw::c_long;
    // }
    // extern "C" {
    #[doc = " @brief Get a pointer to a channel's data format structure"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @return A pointer to the channel's iio_data_format structure"]
    pub fn iio_channel_get_data_format(chn: *const iio_channel) -> *const iio_data_format;
    // }
    // extern "C" {
    #[doc = " @brief Convert the sample from hardware format to host format"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param dst A pointer to the destination buffer where the converted sample"]
    #[doc = " should be written"]
    #[doc = " @param src A pointer to the source buffer containing the sample"]
    pub fn iio_channel_convert(
        chn: *const iio_channel,
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
    );
    // }
    // extern "C" {
    #[doc = " @brief Convert the sample from host format to hardware format"]
    #[doc = " @param chn A pointer to an iio_channel structure"]
    #[doc = " @param dst A pointer to the destination buffer where the converted sample"]
    #[doc = " should be written"]
    #[doc = " @param src A pointer to the source buffer containing the sample"]
    pub fn iio_channel_convert_inverse(
        chn: *const iio_channel,
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
    );
    // }
    // extern "C" {
    #[doc = " @brief Enumerate the debug attributes of the given device"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @return The number of debug attributes found"]
    pub fn iio_device_get_debug_attrs_count(dev: *const iio_device) -> ::std::os::raw::c_uint;
    // }
    // extern "C" {
    #[doc = " @brief Get the debug attribute present at the given index"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param index The index corresponding to the debug attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the index is invalid, NULL is returned"]
    pub fn iio_device_get_debug_attr(
        dev: *const iio_device,
        index: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Try to find a debug attribute by its name"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param name A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @return On success, a pointer to a static NULL-terminated string"]
    #[doc = " @return If the name does not correspond to any known debug attribute of the"]
    #[doc = " given device, NULL is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is useful to detect the presence of a debug"]
    #[doc = " attribute."]
    #[doc = " It can also be used to retrieve the name of a debug attribute as a pointer"]
    #[doc = " to a static string from a dynamically allocated string."]
    pub fn iio_device_find_debug_attr(
        dev: *const iio_device,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param dst A pointer to the memory area where the NULL-terminated string"]
    #[doc = " corresponding to the value read will be stored"]
    #[doc = " @param len The available length of the memory area, in bytes"]
    #[doc = " @return On success, the number of bytes written to the buffer"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>By passing NULL as the \"attr\" argument to"]
    #[doc = " iio_device_debug_attr_read, it is now possible to read all of the debug"]
    #[doc = " attributes of a device."]
    #[doc = ""]
    #[doc = " The buffer is filled with one block of data per debug attribute of the"]
    #[doc = " device, by the order they appear in the iio_device structure."]
    #[doc = ""]
    #[doc = " The first four bytes of one block correspond to a 32-bit signed value in"]
    #[doc = " network order. If negative, it corresponds to the errno code that were"]
    #[doc = " returned when reading the debug attribute; if positive, it corresponds"]
    #[doc = " to the length of the data read. In that case, the rest of the block contains"]
    #[doc = " the data."]
    pub fn iio_device_debug_attr_read(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of all debug attributes"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param cb A pointer to a callback function"]
    #[doc = " @param data A pointer that will be passed to the callback function"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is especially useful when used with the network"]
    #[doc = " backend, as all the debug attributes are read in one single command."]
    pub fn iio_device_debug_attr_read_all(
        dev: *mut iio_device,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut iio_device,
                attr: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                len: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param src A NULL-terminated string to set the debug attribute to"]
    #[doc = " @return On success, the number of bytes written"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b>By passing NULL as the \"attr\" argument to"]
    #[doc = " iio_device_debug_attr_write, it is now possible to write all of the"]
    #[doc = " debug attributes of a device."]
    #[doc = ""]
    #[doc = " The buffer must contain one block of data per debug attribute of the device,"]
    #[doc = " by the order they appear in the iio_device structure."]
    #[doc = ""]
    #[doc = " The first four bytes of one block correspond to a 32-bit signed value in"]
    #[doc = " network order. If negative, the debug attribute is not written; if positive,"]
    #[doc = " it corresponds to the length of the data to write. In that case, the rest"]
    #[doc = " of the block must contain the data."]
    pub fn iio_device_debug_attr_write(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param src A pointer to the data to be written"]
    #[doc = " @param len The number of bytes that should be written"]
    #[doc = " @return On success, the number of bytes written"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_debug_attr_write_raw(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ssize_t;
    // }
    // extern "C" {
    #[doc = " @brief Set the values of all debug attributes"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param cb A pointer to a callback function"]
    #[doc = " @param data A pointer that will be passed to the callback function"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    #[doc = ""]
    #[doc = " <b>NOTE:</b> This function is especially useful when used with the network"]
    #[doc = " backend, as all the debug attributes are written in one single command."]
    pub fn iio_device_debug_attr_write_all(
        dev: *mut iio_device,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut iio_device,
                attr: *const ::std::os::raw::c_char,
                buf: *mut ::std::os::raw::c_void,
                len: size_t,
                d: *mut ::std::os::raw::c_void,
            ) -> ssize_t,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param val A pointer to a bool variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_debug_attr_read_bool(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param val A pointer to a long long variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_debug_attr_read_longlong(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Read the content of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param val A pointer to a double variable where the value should be stored"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_debug_attr_read_double(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param val A bool value to set the debug attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_debug_attr_write_bool(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: bool,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param val A long long value to set the debug attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_debug_attr_write_longlong(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of the given debug attribute"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param attr A NULL-terminated string corresponding to the name of the"]
    #[doc = " debug attribute"]
    #[doc = " @param val A double value to set the debug attribute to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_debug_attr_write_double(
        dev: *const iio_device,
        attr: *const ::std::os::raw::c_char,
        val: f64,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Identify the channel or debug attribute corresponding to a filename"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param filename A NULL-terminated string corresponding to the filename"]
    #[doc = " @param chn A pointer to a pointer of an iio_channel structure. The pointed"]
    #[doc = " pointer will be set to the address of the iio_channel structure if the"]
    #[doc = " filename correspond to the attribute of a channel, or NULL otherwise."]
    #[doc = " @param attr A pointer to a NULL-terminated string. The pointer"]
    #[doc = " pointer will be set to point to the name of the attribute corresponding to"]
    #[doc = " the filename."]
    #[doc = " @return On success, 0 is returned, and *chn and *attr are modified."]
    #[doc = " @return On error, a negative errno code is returned. *chn and *attr are not"]
    #[doc = " modified."]
    pub fn iio_device_identify_filename(
        dev: *const iio_device,
        filename: *const ::std::os::raw::c_char,
        chn: *mut *mut iio_channel,
        attr: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Set the value of a hardware register"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param address The address of the register"]
    #[doc = " @param value The value to set the register to"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_reg_write(
        dev: *mut iio_device,
        address: u32,
        value: u32,
    ) -> ::std::os::raw::c_int;
    // }
    // extern "C" {
    #[doc = " @brief Get the value of a hardware register"]
    #[doc = " @param dev A pointer to an iio_device structure"]
    #[doc = " @param address The address of the register"]
    #[doc = " @param value A pointer to the variable where the value will be written"]
    #[doc = " @return On success, 0 is returned"]
    #[doc = " @return On error, a negative errno code is returned"]
    pub fn iio_device_reg_read(
        dev: *mut iio_device,
        address: u32,
        value: *mut u32,
    ) -> ::std::os::raw::c_int;
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}

// #[test]
fn bindgen_test_layout_iio_data_format() {
    assert_eq!(
        ::std::mem::size_of::<iio_data_format>(),
        32usize,
        concat!("Size of: ", stringify!(iio_data_format))
    );
    assert_eq!(
        ::std::mem::align_of::<iio_data_format>(),
        8usize,
        concat!("Alignment of ", stringify!(iio_data_format))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iio_data_format>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iio_data_format>())).bits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iio_data_format>())).shift as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iio_data_format>())).is_signed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(is_signed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iio_data_format>())).is_fully_defined as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(is_fully_defined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iio_data_format>())).is_be as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(is_be)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iio_data_format>())).with_scale as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(with_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iio_data_format>())).scale as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iio_data_format>())).repeat as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iio_data_format),
            "::",
            stringify!(repeat)
        )
    );
}
